import React from "react";
import * as d3 from "d3";
import {SimulationNodeDatum, drag} from "d3";

import {Data, Node} from "../../utils/common-types";
import transformData from "../../utils/transformData";
import {data} from "../../utils/sample-data";

interface GraphProps {
  lineageData: object;
  activeNode: string;
}

interface GraphState {
  graphData: Data;
}

class Graph extends React.Component<GraphProps, GraphState> {
  private coordinates: [number, number][] = [];

  static defaultProps: GraphProps = {
    lineageData: data,
    activeNode: data.baseEntityGuid
  };

  constructor(props: GraphProps) {
    super(props);

    this.state = {
      graphData: {
        nodes: [],
        links: []
      }
    };
  }

  updateGraphData = () => {
    let newData = transformData(this.props.lineageData);
    this.setState({graphData: {...newData}}, () => {
      console.log("The state is ");
      console.log(this.state);
      this.updateSvg();
    });
  };



  updateSvg = () => {
    console.log("running Svg");
    const simulation: any = d3
      .forceSimulation(this.state.graphData.nodes as SimulationNodeDatum[])
      .force("links", d3.forceLink())
      .force("charge", d3.forceManyBody());


    console.log(simulation)
    let nodes = d3
      .select("svg")
      .append("g")
      .selectAll("circle")
      .data(this.state.graphData.nodes)
      .enter()
      .append("circle")
      .attr("fill", "orange")
      .attr("r", d => d.name.length * 2)
      //.attr("cx", d => (d.name.length % 10) * 100)
      // .attr("cy", () => (Math.random() * 100000) % 400)
      .attr("data-nodeId", d => d.id)
      .call(drag().on("start", dragStarted));

    function dragStarted(d: any) {
      if (!d3.event.active) {
        simulation.alphaTarget(0.3).restart()
      }
    }


    let nodesPosition: {
      [key: string]: [number, number];
    } = {};

    console.log(nodes.data());
    let cx = nodes.each(function () {
      //      console.log(this.cx.baseVal.value)
      nodesPosition[this.getAttribute("data-nodeId")!] = [
        this.cx.baseVal.value,
        this.cy.baseVal.value
      ];
    });

    console.log(nodesPosition);

    console.log(cx);

    let links = d3
      .select("svg")
      .append("g")
      .attr("class", "links")
      .selectAll("line")
      .data(this.state.graphData.links)
      .enter()
      .append("line")
      //  .attr("x1", d => nodesPosition[d.source][0])
      //  .attr("y1", d => nodesPosition[d.source][1])
      //  .attr("x2", d => nodesPosition[d.target][0])
      //  .attr("y2", d => nodesPosition[d.target][1])
      //  .style("stroke", "red")
      .style("stroke-width", 2);
  }

  componentDidMount() {}

  componentDidUpdate() {
    console.log("Component updated");
  }

  render() {
    return (
      <div className="graph-container">
        <button onClick={this.updateGraphData}>Generate</button>
        <svg width="100%" height="400px"></svg>
      </div>
    );
  }
}

export default Graph;
